//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package azure

import (
	"context"
	"errors"
	"net/http"
	"net/url"
	"strings"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
)

// Client contains the methods for the AzureOpenAIAPI group.
// Don't use this type directly, use a constructor function instead.
type Client struct {
	internal *azcore.Client
}

// GetChatCompletions - Gets chat completions for the provided chat messages. Completions support a wide variety of tasks
// and generate text that continues from or "completes" provided prompt data.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-06-01-preview
//   - endpoint - Supported Cognitive Services endpoints (protocol and hostname, for example: https://westus.api.cognitive.microsoft.com).
//   - deploymentID - deployment id of the deployed model
//   - options - GetChatCompletionsOptions contains the optional parameters for the Client.GetChatCompletions
//     method.
func (client *Client) GetChatCompletions(ctx context.Context, endpoint string, deploymentID string, body ChatCompletionsOptions, options *GetChatCompletionsOptions) (GetChatCompletionsResponse, error) {
	var err error
	req, err := client.getChatCompletionsCreateRequest(ctx, endpoint, deploymentID, body, options)
	if err != nil {
		return GetChatCompletionsResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return GetChatCompletionsResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return GetChatCompletionsResponse{}, err
	}
	resp, err := client.getChatCompletionsHandleResponse(httpResp)
	return resp, err
}

// getChatCompletionsCreateRequest creates the GetChatCompletions request.
func (client *Client) getChatCompletionsCreateRequest(ctx context.Context, endpoint string, deploymentID string, body ChatCompletionsOptions, options *GetChatCompletionsOptions) (*policy.Request, error) {
	host := "{endpoint}/openai"
	host = strings.ReplaceAll(host, "{endpoint}", endpoint)
	urlPath := "chat/completions"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-06-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// getChatCompletionsHandleResponse handles the GetChatCompletions response.
func (client *Client) getChatCompletionsHandleResponse(resp *http.Response) (GetChatCompletionsResponse, error) {
	result := GetChatCompletionsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ChatCompletions); err != nil {
		return GetChatCompletionsResponse{}, err
	}
	return result, nil
}

// GetCompletions - Gets completions for the provided input prompts. Completions support a wide variety of tasks and generate
// text that continues from or "completes" provided prompt data.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-06-01-preview
//   - endpoint - Supported Cognitive Services endpoints (protocol and hostname, for example: https://westus.api.cognitive.microsoft.com).
//   - deploymentID - deployment id of the deployed model
//   - options - GetCompletionsOptions contains the optional parameters for the Client.GetCompletions
//     method.
func (client *Client) GetCompletions(ctx context.Context, endpoint string, deploymentID string, body CompletionsOptions, options *GetCompletionsOptions) (GetCompletionsResponse, error) {
	var err error
	req, err := client.getCompletionsCreateRequest(ctx, endpoint, deploymentID, body, options)
	if err != nil {
		return GetCompletionsResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return GetCompletionsResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return GetCompletionsResponse{}, err
	}
	resp, err := client.getCompletionsHandleResponse(httpResp)
	return resp, err
}

// getCompletionsCreateRequest creates the GetCompletions request.
func (client *Client) getCompletionsCreateRequest(ctx context.Context, endpoint string, deploymentID string, body CompletionsOptions, options *GetCompletionsOptions) (*policy.Request, error) {
	host := "{endpoint}/openai"
	host = strings.ReplaceAll(host, "{endpoint}", endpoint)
	urlPath := "completions"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-06-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// getCompletionsHandleResponse handles the GetCompletions response.
func (client *Client) getCompletionsHandleResponse(resp *http.Response) (GetCompletionsResponse, error) {
	result := GetCompletionsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Completions); err != nil {
		return GetCompletionsResponse{}, err
	}
	return result, nil
}

// GetEmbeddings - Return the embeddings for a given prompt.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-06-01-preview
//   - endpoint - Supported Cognitive Services endpoints (protocol and hostname, for example: https://westus.api.cognitive.microsoft.com).
//   - deploymentID - deployment id of the deployed model
//   - options - GetEmbeddingsOptions contains the optional parameters for the Client.GetEmbeddings
//     method.
func (client *Client) GetEmbeddings(ctx context.Context, endpoint string, deploymentID string, body EmbeddingsOptions, options *GetEmbeddingsOptions) (GetEmbeddingsResponse, error) {
	var err error
	req, err := client.getEmbeddingsCreateRequest(ctx, endpoint, deploymentID, body, options)
	if err != nil {
		return GetEmbeddingsResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return GetEmbeddingsResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return GetEmbeddingsResponse{}, err
	}
	resp, err := client.getEmbeddingsHandleResponse(httpResp)
	return resp, err
}

// getEmbeddingsCreateRequest creates the GetEmbeddings request.
func (client *Client) getEmbeddingsCreateRequest(ctx context.Context, endpoint string, deploymentID string, body EmbeddingsOptions, options *GetEmbeddingsOptions) (*policy.Request, error) {
	host := "{endpoint}/openai"
	host = strings.ReplaceAll(host, "{endpoint}", endpoint)
	urlPath := "embeddings"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-06-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// getEmbeddingsHandleResponse handles the GetEmbeddings response.
func (client *Client) getEmbeddingsHandleResponse(resp *http.Response) (GetEmbeddingsResponse, error) {
	result := GetEmbeddingsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Embeddings); err != nil {
		return GetEmbeddingsResponse{}, err
	}
	return result, nil
}

// GetImageOperationStatus - Returns the status of the images operation
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-06-01-preview
//   - endpoint - Supported Cognitive Services endpoints (protocol and hostname, for example: https://westus.api.cognitive.microsoft.com).
//   - operationID - .
//   - options - GetImageOperationStatusOptions contains the optional parameters for the Client.GetImageOperationStatus
//     method.
func (client *Client) GetImageOperationStatus(ctx context.Context, endpoint string, operationID string, options *GetImageOperationStatusOptions) (GetImageOperationStatusResponse, error) {
	var err error
	req, err := client.getImageOperationStatusCreateRequest(ctx, endpoint, operationID, options)
	if err != nil {
		return GetImageOperationStatusResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return GetImageOperationStatusResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return GetImageOperationStatusResponse{}, err
	}
	resp, err := client.getImageOperationStatusHandleResponse(httpResp)
	return resp, err
}

// getImageOperationStatusCreateRequest creates the GetImageOperationStatus request.
func (client *Client) getImageOperationStatusCreateRequest(ctx context.Context, endpoint string, operationID string, options *GetImageOperationStatusOptions) (*policy.Request, error) {
	host := "{endpoint}/openai"
	host = strings.ReplaceAll(host, "{endpoint}", endpoint)
	urlPath := "/operations/images/{operationId}"
	if operationID == "" {
		return nil, errors.New("parameter operationID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{operationId}", url.PathEscape(operationID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-06-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getImageOperationStatusHandleResponse handles the GetImageOperationStatus response.
func (client *Client) getImageOperationStatusHandleResponse(resp *http.Response) (GetImageOperationStatusResponse, error) {
	result := GetImageOperationStatusResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ImageOperationResponse); err != nil {
		return GetImageOperationStatusResponse{}, err
	}
	return result, nil
}

// StartGenerateImage - Starts the generation of a batch of images from a text caption
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-06-01-preview
//   - endpoint - Supported Cognitive Services endpoints (protocol and hostname, for example: https://westus.api.cognitive.microsoft.com).
//   - options - StartGenerateImageOptions contains the optional parameters for the Client.StartGenerateImage
//     method.
func (client *Client) StartGenerateImage(ctx context.Context, endpoint string, body ImageGenerationOptions, options *StartGenerateImageOptions) (StartGenerateImageResponse, error) {
	var err error
	req, err := client.startGenerateImageCreateRequest(ctx, endpoint, body, options)
	if err != nil {
		return StartGenerateImageResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return StartGenerateImageResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return StartGenerateImageResponse{}, err
	}
	resp, err := client.startGenerateImageHandleResponse(httpResp)
	return resp, err
}

// startGenerateImageCreateRequest creates the StartGenerateImage request.
func (client *Client) startGenerateImageCreateRequest(ctx context.Context, endpoint string, body ImageGenerationOptions, options *StartGenerateImageOptions) (*policy.Request, error) {
	host := "{endpoint}/openai"
	host = strings.ReplaceAll(host, "{endpoint}", endpoint)
	urlPath := "/images/generations:submit"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-06-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// startGenerateImageHandleResponse handles the StartGenerateImage response.
func (client *Client) startGenerateImageHandleResponse(resp *http.Response) (StartGenerateImageResponse, error) {
	result := StartGenerateImageResponse{}
	if val := resp.Header.Get("Operation-Location"); val != "" {
		result.OperationLocation = &val
	}
	if err := runtime.UnmarshalAsJSON(resp, &result.ImageOperationResponse); err != nil {
		return StartGenerateImageResponse{}, err
	}
	return result, nil
}
